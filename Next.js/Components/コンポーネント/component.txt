

| コンポーネント名   | 用途・説明 |
|-----------------|---------------------------|
| `Button`        | ボタンを作成するためのコンポーネント。クリックイベントを扱うのに使う。 |
| `AppBar`        | ヘッダーとして使用されるナビゲーションバーのコンポーネント。タイトルやメニューなどを表示できる。 |
| `Toolbar`       | `AppBar`の中でツールやアイコンを配置するためのコンテナ。 |
| `Grid`          | レスポンシブデザインを実現するためのレイアウトコンポーネント。グリッドシステムを使って配置。 |
| `Card`          | 情報をカード形式で表示するためのコンポーネント。画像やテキストをまとめて表示。 |
| `TextField`     | テキスト入力フィールドを作成するコンポーネント。フォームで使うことが多い。 |
| `IconButton`    | アイコンをボタンとして使用できるコンポーネント。削除や編集などのアクションに使うことが多い。 |
| `Drawer`        | 画面のサイドからスライドして表示されるナビゲーションメニュー。 |
| `Dialog`        | モーダルウィンドウを作成するためのコンポーネント。ユーザーに確認を求めるときなどに使う。 |
| `Snackbar`      | 一時的な通知を表示するためのコンポーネント。成功や失敗のフィードバックに使う。 |
| `Avatar`        | ユーザーのプロフィール画像やアイコンを表示するためのコンポーネント。 |
| `List`          | リスト形式でアイテムを表示するためのコンポーネント。複数のリストアイテムを縦に並べて表示。 |
| `ListItem`      | `List`内で各アイテムを表すコンポーネント。リストの1つ1つの項目に相当する。 |
| `Menu`          | ドロップダウン形式のメニューを作成するためのコンポーネント。オプションを選択させるときに使う。 |
| `Tabs`          | タブを作成し、複数のコンテンツを切り替えるためのコンポーネント。 |
| `Tooltip`       | アイコンやボタンにマウスオーバーした際に補足情報を表示するためのコンポーネント。 |
| `Paper`         | 紙のような質感でコンテンツを包むためのコンポーネント。カードやダッシュボードに使うことが多い。 |
| `Checkbox`      | チェックボックスを表示するためのコンポーネント。複数選択肢の中から選ばせる際に使う。 |
| `Switch`        | ON/OFFのトグルスイッチを作成するためのコンポーネント。設定や切り替えに使う。 |
| `CircularProgress` | 円形のプログレスインジケーター。データの読み込み中などに表示する。 |
| `LinearProgress`   | 線形のプログレスバー。進捗状況を表示するのに使う。 |
| `Table`         | データを表形式で表示するためのコンポーネント。行や列でデータを整理。 |
| `Pagination`    | ページネーションを作成し、大量のデータを複数ページに分けて表示するためのコンポーネント。 |





| コンポーネント名           | 用途・説明 |
|---------------------------|------------|
| `Component` / `PureComponent` | Reactのクラスベースのコンポーネント。状態やライフサイクルメソッドを持てる。`PureComponent`は`shouldComponentUpdate`が自動で実装され、再レンダリングが最適化される。 |
| `useState`                 | Reactの関数コンポーネントで状態を管理するためのフック。ローカルな状態を扱う。 |
| `useEffect`                | 副作用（サイドエフェクト）を管理するためのフック。データの取得やDOMの更新時に使用する。 |
| `useContext`               | コンテキストAPIを使って、グローバルな状態やデータを管理・共有するためのフック。 |
| `useReducer`               | 複雑な状態管理を行うためのフック。`useState`の代替として、状態の変更をリデューサー関数で行う。 |
| `useMemo`                  | 高コストな計算や関数の結果をメモ化（キャッシュ）するためのフック。パフォーマンス向上に使える。 |
| `useCallback`              | 関数をメモ化して、不要な再レンダリングを防ぐためのフック。 |
| `useRef`                   | DOM要素や任意の値を保持し続けるためのフック。再レンダリングのトリガーにはならない。 |
| `useLayoutEffect`          | レンダリング後にDOMを操作する場合に使用するフック。`useEffect`よりも同期的に実行される。 |
| `Fragment`                 | 不要なDOM要素を追加せずに複数の子要素を返すためのコンポーネント。 |
| `StrictMode`               | アプリケーションの潜在的な問題をチェックするためのコンポーネント。開発モードでのみ有効。 |
| `Suspense`                 | 非同期処理中のコンポーネントを遅延レンダリングするためのコンポーネント。データがまだないときにローディングUIを表示する。 |
| `ErrorBoundary`            | JavaScriptエラーが発生した場合に、フォールバックUIを表示するためのコンポーネント。 |
| `forwardRef`               | 子コンポーネントに`ref`を渡すために使う高階コンポーネント。DOM要素へのアクセスを親から制御する際に使う。 |
| `memo`                     | コンポーネントの再レンダリングを最適化するための高階コンポーネント。特定の条件下で再レンダリングを防ぐ。 |
| `lazy`                     | 動的にコンポーネントを読み込み、コード分割を実現するためのコンポーネント。 `Suspense`と併用する。 |

